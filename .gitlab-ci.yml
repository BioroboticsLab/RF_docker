stages:
  - build
  - deploy

build ubuntu-18.04:
  stage: build
  tags: [ linux, shell ]
  before_script:
    - echo "${CI_REGISTRY_PASSWORD}" | docker login -u "${CI_REGISTRY_USER}" "${CI_REGISTRY}" --password-stdin
  script:
    - GPU_DRIVER_VERSION="$(dpkg-query --showformat='${Version}' --show 'nvidia-driver-*')"
    - CACHE_FILE="/var/lib/gitlab-runner/.local/share/robofish-docker-gpu-driver-version"
    - if [[ -f $CACHE_FILE ]] && [[ "$(cat $CACHE_FILE)" == "$GPU_DRIVER_VERSION" ]]; then OPTS=''; else OPTS='--no-cache'; fi
    - echo -n $GPU_DRIVER_VERSION > $CACHE_FILE
    - docker build $OPTS --pull -t "${CI_REGISTRY}/${CI_PROJECT_PATH,,}:base-ubuntu18.04" -f ubuntu18.04/base/Dockerfile ubuntu18.04/base
    - docker push "${CI_REGISTRY}/${CI_PROJECT_PATH,,}:base-ubuntu18.04"
    - docker build $OPTS --pull -t "${CI_REGISTRY}/${CI_PROJECT_PATH,,}:devel-ubuntu18.04" -f ubuntu18.04/devel/Dockerfile ubuntu18.04
    - docker push "${CI_REGISTRY}/${CI_PROJECT_PATH,,}:devel-ubuntu18.04"
    - docker build $OPTS --pull -t "${CI_REGISTRY}/${CI_PROJECT_PATH,,}:cuda-devel-ubuntu18.04" -f ubuntu18.04/cuda-devel/Dockerfile ubuntu18.04
    - docker push "${CI_REGISTRY}/${CI_PROJECT_PATH,,}:cuda-devel-ubuntu18.04"
    - docker build $OPTS --pull -t "${CI_REGISTRY}/${CI_PROJECT_PATH,,}:jupyter-ubuntu18.04" -f ubuntu18.04/jupyter/Dockerfile ubuntu18.04/jupyter
    - docker push "${CI_REGISTRY}/${CI_PROJECT_PATH,,}:jupyter-ubuntu18.04"
  after_script:
    - docker logout "${CI_REGISTRY}"

build windows:
  stage: build
  tags: [ windows, shell ]
  before_script:
    - echo "${CI_REGISTRY_PASSWORD}" | docker login -u "${CI_REGISTRY_USER}" "${CI_REGISTRY}" --password-stdin
    - Copy-Item 'C:/Windows/System32/opengl32.dll' 'windows/opengl32.dll'
    - Copy-Item 'C:/Windows/System32/glu32.dll' 'windows/glu32.dll'
    - Copy-Item 'C:/Windows/System32/ddraw.dll' 'windows/ddraw.dll'
    - Copy-Item 'C:/Windows/System32/nvcuda.dll' 'windows/nvcuda.dll'
  script:
    - docker build --isolation process --memory 2G --pull -t "${CI_REGISTRY}/$(${CI_PROJECT_PATH}.toLower()):base-windows" windows/base
    - docker push "${CI_REGISTRY}/$(${CI_PROJECT_PATH}.toLower()):base-windows"
    - docker build --isolation process --memory 15G --pull -t "${CI_REGISTRY}/$(${CI_PROJECT_PATH}.toLower()):devel-windows" -f windows/devel/Dockerfile windows
    - docker push "${CI_REGISTRY}/$(${CI_PROJECT_PATH}.toLower()):devel-windows"
    - docker build --isolation process --memory 15G --pull -t "${CI_REGISTRY}/$(${CI_PROJECT_PATH}.toLower()):cuda-devel-windows" -f windows/cuda-devel/Dockerfile windows
    - docker push "${CI_REGISTRY}/$(${CI_PROJECT_PATH}.toLower()):cuda-devel-windows"
  after_script:
    - docker logout "${CI_REGISTRY}"

trigger dependents:
  stage: deploy
  tags: [ linux, docker ]
  image: git.imp.fu-berlin.de:5000/bioroboticslab/robofish/docker:devel-ubuntu18.04
  script:
    - . /etc/profile.d/robofish.sh
    - gitlab-trigger-pipeline bioroboticslab%2Frobofish%2Finterfaces $CI_JOB_TOKEN master
